{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IAAM,EAAO,SAAS,aAAa,CAAC,SAC9B,EAAY,SAAS,gBAAgB,CAAC,MAmBvC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,AACE,CAAA,EAAG,EAAG,QAAQ,EAAE,MAAM,CAAG,GAC5B,AAnBJ,SAAwB,CAAO,EAC7B,IAAM,EAAY,EAAG,EAAQ,QAAQ,EAEhC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,EAAQ,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA/B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACG,MAAM,E,C,M,E,CADT,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,IAAM,EAAW,EAAQ,SAAS,CAAC,IAAI,GACjC,EAAU,SAAS,aAAa,CAAC,OAEvC,CAAA,EAAQ,WAAW,CAAG,GACtB,EAAQ,SAAS,CAAG,EACpB,EAAQ,WAAW,CAAC,GAEpB,EAAS,OAAO,CAAC,SAAC,CAAlB,EAA2B,OAAA,EAAQ,WAAW,CAAC,E,EACjD,EAImB,E,C,C,M,E,CAFd,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,EAAK,gBAAgB,CACnB,QACA,SAAC,CAFH,EAGI,GAAI,AAAsB,SAAtB,EAAG,MAAM,CAAC,OAAO,CAAa,CAChC,IAAM,EAAW,EAAG,MAAM,CAAC,WAAW,AAEtC,CAAA,EAAS,KAAK,CAAC,OAAO,CACpB,AAA2B,SAA3B,EAAS,KAAK,CAAC,OAAO,CAAc,OAAS,OACjD,CACF,EACA,CAAA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\nvar tree = document.querySelector(\".tree\");\nvar headlines = document.querySelectorAll(\"li\");\nfunction wrapTextToSpan(element) {\n    var children = _to_consumable_array(element.children);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = element.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var child = _step.value;\n            child.remove();\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var copyText = element.innerText.trim();\n    var newSpan = document.createElement(\"span\");\n    element.textContent = \"\";\n    newSpan.innerText = copyText;\n    element.appendChild(newSpan);\n    children.forEach(function(item) {\n        return element.appendChild(item);\n    });\n}\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = headlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var el = _step.value;\n        if (_to_consumable_array(el.children).length > 0) wrapTextToSpan(el);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\ntree.addEventListener(\"click\", function(ev) {\n    if (ev.target.tagName === \"SPAN\") {\n        var hideList = ev.target.nextSibling;\n        hideList.style.display = hideList.style.display !== \"none\" ? \"none\" : \"block\";\n    }\n}, true);\n\n//# sourceMappingURL=index.39cec7ec.js.map\n","'use strict';\n\n// write code here\nconst tree = document.querySelector('.tree');\nconst headlines = document.querySelectorAll('li');\n\nfunction wrapTextToSpan(element) {\n  const children = [...element.children];\n\n  for (const child of element.children) {\n    child.remove();\n  }\n\n  const copyText = element.innerText.trim();\n  const newSpan = document.createElement('span');\n\n  element.textContent = '';\n  newSpan.innerText = copyText;\n  element.appendChild(newSpan);\n\n  children.forEach((item) => element.appendChild(item));\n}\n\nfor (const el of headlines) {\n  if ([...el.children].length > 0) {\n    wrapTextToSpan(el);\n  }\n}\n\ntree.addEventListener(\n  'click',\n  (ev) => {\n    if (ev.target.tagName === 'SPAN') {\n      const hideList = ev.target.nextSibling;\n\n      hideList.style.display =\n        hideList.style.display !== 'none' ? 'none' : 'block';\n    }\n  },\n  true,\n);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","tree","document","querySelector","headlines","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","el","value","children","wrapTextToSpan","element","child","remove","err","return","copyText","innerText","trim","newSpan","createElement","textContent","appendChild","forEach","item","addEventListener","ev","target","tagName","hideList","nextSibling","style","display"],"version":3,"file":"index.39cec7ec.js.map"}